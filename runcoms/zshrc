# Amazon Q pre block. Keep at the top of this file.
if [[ -f "${HOME}/.config/enable-amazon-q" ]]; then
    if [[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh" ]]; then
        builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.pre.zsh"
    fi
fi

# Source Prezto.

# Profile Prezto startup. Use "zprof" to print results.
# zmodload zsh/zprof

# Debug toggle
export ZSH_DEBUG=false

# Enable zsh debugging if toggle is on
if [[ "${ZSH_DEBUG}" == "true" ]]; then
    setopt XTRACE
    setopt VERBOSE
    PS4='+%N:%i> '
fi

export ZPREZTO_HOME=${HOME}/.zprezto

# Helper function to safely add paths
function add_to_path() {
    local dir="${1}"
    if [[ -d "${dir}" && ":${PATH}:" != *":${dir}:"* ]]; then
        export PATH="${dir}:${PATH}"
    fi
}

# Helper function to safely source files
function source_if_exists() {
    local file="${1}"
    local shell="${SHELL##*/}"
    local source_file="${0}"

    # Skip if file doesn't exist
    if [[ ! -s "${file}" ]]; then
        [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] File does not exist or is empty: ${file}"
        return
    fi

    # Handle shell-specific files
    if [[ "${file}" == *.zsh ]]; then
        [[ "${shell}" == "zsh" ]] && {
            [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Sourcing zsh file: ${file}"
            if ! (source "${file}"); then
                [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Failed to source zsh file: ${file}"
            fi
        }
    elif [[ "${file}" == *.bash ]]; then
        [[ "${shell}" == "bash" ]] && {
            [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Sourcing bash file: ${file}"
            if ! (source "${file}"); then
                [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Failed to source bash file: ${file}"
            fi
        }
    else
        # Source non-shell-specific files
        [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Sourcing file: ${file}"
        if ! (source "${file}"); then
            [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Failed to source file: ${file}"
        fi
    fi
}

# Add directories to PATH
add_to_path "/opt/homebrew/Cellar/ruby/3.3.0/bin"
add_to_path "${HOME}/code/bin/commands"
add_to_path "${HOME}/code/bin/tools"
add_to_path "${HOME}/code/bin"
add_to_path "${HOME}/Library/Application Support/JetBrains/Toolbox/scripts"
add_to_path "/opt/homebrew/bin"
add_to_path "/usr/local/opt/curl/bin"
add_to_path "${HOME}/.local/bin"
add_to_path "/opt/homebrew/opt/postgresql@16/bin"
add_to_path "${HOME}/.toolbox/bin"
add_to_path "${HOME}/.rvm/bin"
add_to_path "${HOME}/.cargo/bin"
add_to_path "/usr/local/aws-cli/v2/current/bin"
add_to_path "${HOME}/apache-maven-3.9.6/bin"
add_to_path "/usr/local/opt/ruby@2.7/bin"

# Python path handling
if [[ -s "/opt/homebrew/opt/python@3.12/bin" ]]; then
    add_to_path "/opt/homebrew/opt/python@3.12/bin"
elif [[ -s "/opt/python3/bin/python3" ]]; then
    add_to_path "/opt/python3/bin"
fi

# Source configuration files
source_if_exists "${HOME}}/.zprezto/runcoms/amazonrc"
source_if_exists "${HOME}/.fzf.zsh"
source_if_exists "${HOME}/.iterm2_shell_integration.bash"
source_if_exists "${HOME}/.iterm2_shell_integration.zsh"
source_if_exists "${HOME}/.cargo/bin"
source_if_exists "/usr/local/aws-cli/v2/current/bin"
source_if_exists "${HOME}/.fzf.zsh"

export EDITOR=nvim
export VISUAL=nvim


if type starship > /dev/null; then
    eval "$(starship init zsh)"
fi

# Find latest java version
if [[ -z $JAVA_HOME ]]; then
    export JAVA_HOME="$(find "${HOME}/Library/Java/JavaVirtualMachines/" -type d -depth 1 |
        awk -F- '/[0-9]+\.[0-9]+\.[0-9]+/ {
            version=$NF;
            gsub(/\.jdk$/, "", version);
            split(version, v, ".");
            printf "%d %d %d %s\n", v[1], v[2], v[3], $0
        }' | sort -k1,1nr -k2,2nr -k3,3nr \
        | awk '{ print $4 "/Contents/Home" }' |
        head -n 1)"

    if [[ -s "${JAVA_HOME}" ]]; then
        export PATH="${JAVA_HOME}/bin:${PATH}"
        export JAVACMD="${JAVA_HOME}/bin/java"
    else
        RED='\033[31m'
        RED_ITALIC='\033[31;3m'
        RESET='\033[0m'
        echo "${RED}Auto detected JAVA_HOME '${RED_ITALIC}${JAVA_HOME}${RED}' does not actually exist, unsetting JAVA_HOME${RESET}"
        unset JAVA_HOME
    fi
fi

# OS defaults
alias "grep"="grep --color=auto"
alias "ll"="/bin/ls -Alh --color=auto"
alias "echo"="echo -e"
alias "beep"="echo -ne '\\007'"

# Misc
alias "java-version"="source ${HOME}/code/bin/java-version.sh"
alias "start-postgres"='LC_ALL="C" /opt/homebrew/opt/postgresql@16/bin/postgres -D /opt/homebrew/var/postgresql@16'
alias "rails"='gem exec rails'
alias "python"="python3"
alias "kill-grep"="ps -aux | grep -i "

# MacOS start steam using game toolkit (Apples fork of wine)
alias "win-steam"="gameportingtoolkit ${HOME}/steam-wine 'C:\\Program Files (x86)\\Steam\\steam.exe'"

# Kubernetes
alias "k"="kubectl"
alias "kgp"="kubectl get pods"
alias "kpf"="kubectl port-forward"
alias "kl"="kubectl logs"

# Easy stop logictech process when mx devices stop working
alias "kill-logi"="ps -A | grep -i 'Logitech' | grep -v 'grep' | awk '{ print \$1 }' | sudo xargs kill -9"

function kill-xargs () {
    if [[ -n "$1" ]]
    then
        # OG
        # src https://stackoverflow.com/questions/8987037/how-to-kill-all-processes-with-a-given-partial-name
        # ps -ef | grep 'myProcessName' | grep -v grep | awk '{print $2}' | xargs -r kill -9
        ps -aux | grep -i "$1" | grep -v grep | awk '{print $2}' | xargs -r kill -9
    else
        echo "A process name must be specified"
        echo "will run \`ps -aux | grep -i "\$1" | grep -v grep | awk '{print \$2}' | xargs -r kill -9\`"
    fi
}

alias "fix-iphone-mirroring"="rm /Users/smbayer/Library/Containers/com.apple.ScreenContinuity/Data/Library/Preferences/com.apple.ScreenContinuity.plist"

function tmux-tail () {
    # Check if at least one argument (session name) is provided
    if [[ $# -lt 1 ]]; then
        echo "Usage: tmux_logs <session_name> [number_of_lines]"
        return 1
    fi

    # Assign arguments to variables
    session_name=$1
    num_lines=${2:-100}  # Default to 100 if not provided

    # Check if the session exists
    if ! tmux has-session -t "$session_name" 2>/dev/null; then
        echo "Error: Tmux session '$session_name' not found"
        return 1
    fi

    # Capture and print the logs
    tmux capture-pane -p -t "$session_name" -S -"$num_lines" | grep -v '^$'
}

# Docker
alias "dc"="docker-compose"
alias "rm-images"="docker images | awk 'NR!=1' | awk '{ print \$3 }' | xargs docker image rm"

function docker-compose-restart () {
    local WORKER="${1}"
    echo "Restarting worker ${WORKER}"
    docker-compose stop ${WORKER}
    docker-compose build ${WORKER}
    docker-compose up --no-start ${WORKER}
    docker-compose start ${WORKER}
}

function nvm-init () {
    export NVM_DIR="${HOME}/.nvm"

    # Check if nvm is installed via homebrew
    if [ -s "/opt/homebrew/opt/nvm/nvm.sh" ]; then
        \. "/opt/homebrew/opt/nvm/nvm.sh"
        [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
    # Fallback to NVM_DIR if homebrew installation not found
    elif [ -s "$NVM_DIR/nvm.sh" ]; then
        \. "$NVM_DIR/nvm.sh"
    else
        echo "nvm not found. Please install nvm first."
        return 1
    fi

    nvm current
}

function iterm-help () {
    echo "DevDesktop:                    <󰘴-󰘳> a"
    echo "Autocompletion:                <󰘳> ;"
    echo "Toolbelt:                      <󰘶-󰘳> b"
    echo "Edit Session:                  <󰘳> i"
    echo "Timestamps:                    <󰘶-󰘳> e"
    echo "Alert On Finish:               <󰘵-󰘳> a"
    echo "Git History:                   <󰘳> g <󰘳> h"
}

function tmux-help () {
    echo "Tmux Create Window:            <󰘴-b> c"
    echo "Tmux Rename Window:            <󰘴-b> ,"
    echo "Tmux Close Window:             <󰘴-b> &"
    echo "Tmux List Window:              <󰘴-b> w"
    echo "Tmux Previous Window:          <󰘴-b> p"
    echo "Tmux Next Window:              <󰘴-b> n"
    echo "Tmux Switch Window:            <󰘴-b> 0..9"
    echo "Tmux Split Window Vertical:    <󰘴-b> %"
    echo 'Tmux Split Window Horizontal:  <󰘴-b> "'
    echo "Tmux Next Pane:                <󰘴-b> o"
    echo "Tmux Show Pane Numbers:        <󰘴-b> p"
    echo "Tmux Switch Pane:              <󰘴-b> q 0..9"
    echo "Tmux Convert Pane To Window:   <󰘴-b> q 0..9"
    echo "Tmux Close Pane:               <󰘴-b> x"
}

function lvim-help () {
    echo "https://vimtricks.com/p/vim-code-folding/"
    echo "za – Toggles the current fold open or closed. – The most useful command to know of all of these."
    echo "zA – Same as za except it toggles all folds beneath as well. Since folds can be nested (such as with indent folding), this will toggle the state of all the folds underneath of it, not just the current fold."
    echo "zc – Close the current fold."
    echo "zC – Same as above, but closes folds nested underneath as well."
    echo "zo – Open the current fold."
    echo "zO – Same as above, but opens folds nested underneath as well."
    echo "vimrc no fold: ':set nofoldenable'"
    echo "<S-\`> - Open terminal"
    echo "    or :terminal"
}

# Amazon Q post block. Keep at the bottom of this file.
if [[ -f "${HOME}/.config/enable-amazon-q" ]]; then
    if [[ -f "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh" ]]; then
        builtin source "${HOME}/Library/Application Support/amazon-q/shell/zshrc.post.zsh"
    fi
fi
