# Source Prezto.

# Profile Prezto startup. Use "zprof" to print results.
# zmodload zsh/zprof

# Debug toggle
export ZSH_DEBUG=false

# Enable zsh debugging if toggle is on
if [[ "${ZSH_DEBUG}" == "true" ]]; then
    setopt XTRACE
    setopt VERBOSE
    PS4='+%N:%i> '
fi

export ZPREZTO_HOME=${HOME}/.zprezto
source "${ZDOTDIR:-${HOME}}/.zprezto/init.zsh"

# Helper function to safely add paths
function add_to_path() {
    local dir="${1}"
    if [[ -d "${dir}" && ":${PATH}:" != *":${dir}:"* ]]; then
        export PATH="${dir}:${PATH}"
    fi
}

# Helper function to safely source files
function source_if_exists() {
    local file="${1}"
    local shell="${SHELL##*/}"
    local source_file="${0}"
    
    # Skip if file doesn't exist
    if [[ ! -s "${file}" ]]; then
        [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] File does not exist or is empty: ${file}"
        return
    fi
    
    # Handle shell-specific files
    if [[ "${file}" == *.zsh ]]; then
        [[ "${shell}" == "zsh" ]] && {
            [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Sourcing zsh file: ${file}"
            if ! (source "${file}"); then
                [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Failed to source zsh file: ${file}"
            fi
        }
    elif [[ "${file}" == *.bash ]]; then
        [[ "${shell}" == "bash" ]] && {
            [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Sourcing bash file: ${file}"
            if ! (source "${file}"); then
                [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Failed to source bash file: ${file}"
            fi
        }
    else
        # Source non-shell-specific files
        [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Sourcing file: ${file}"
        if ! (source "${file}"); then
            [[ "${ZSH_DEBUG}" == "true" ]] && echo "[$(date '+%Y-%m-%d %H:%M:%S')] [${source_file}] Failed to source file: ${file}"
        fi
    fi
}

# Add directories to PATH
add_to_path "/opt/homebrew/Cellar/ruby/3.3.0/bin"
add_to_path "${HOME}/code/bin/commands"
add_to_path "${HOME}/code/bin/tools"
add_to_path "${HOME}/code/bin"
add_to_path "${HOME}/Library/Application Support/JetBrains/Toolbox/scripts"
add_to_path "/opt/homebrew/bin"
add_to_path "/usr/local/opt/curl/bin"
add_to_path "${HOME}/.local/bin"
add_to_path "/opt/homebrew/opt/postgresql@16/bin"
add_to_path "${HOME}/.toolbox/bin"
add_to_path "${HOME}/.rvm/bin"
add_to_path "${HOME}/.cargo/bin"
add_to_path "/usr/local/aws-cli/v2/current/bin"
add_to_path "${HOME}/apache-maven-3.9.6/bin"
add_to_path "/usr/local/opt/ruby@2.7/bin"

# Python path handling
if [[ -s "/opt/homebrew/opt/python@3.12/bin" ]]; then
    add_to_path "/opt/homebrew/opt/python@3.12/bin"
elif [[ -s "/opt/python3/bin/python3" ]]; then
    add_to_path "/opt/python3/bin"
fi

# Source configuration files
source_if_exists "${ZDOTDIR:-${HOME}}/.zprezto/runcoms/amazonrc"
source_if_exists "${HOME}/.fzf.zsh"
source_if_exists "${HOME}/.iterm2_shell_integration.bash"
source_if_exists "${HOME}/.iterm2_shell_integration.zsh"

# Java 21
if [[ -s "${HOME}/.jdks/corretto-21.0.2/bin/java" ]]; then
    export JAVA_HOME="${HOME}/.jdks/corretto-21.0.2/bin"
    add_to_path "${HOME}/.jdks/corretto-21.0.2/bin"
fi

export EDITOR=nvim
export VISUAL=nvim

# OS defaults
alias "grep"="grep --color=auto"
alias "ll"="/bin/ls -Alh --color=auto"
alias "echo"="echo -e"
alias "beep"="echo -ne '\\007'"

# Misc
alias "java-version"="source ${HOME}/code/bin/java-version.sh"
alias "start-postgres"='LC_ALL="C" /opt/homebrew/opt/postgresql@16/bin/postgres -D /opt/homebrew/var/postgresql@16'
alias "rails"='gem exec rails'
alias "python"="python3"
alias "kill-grep"="ps -aux | grep -i "

# MacOS start steam using game toolkit (Apples fork of wine)
alias "win-steam"="gameportingtoolkit ${HOME}/steam-wine 'C:\\Program Files (x86)\\Steam\\steam.exe'"

# Kubernetes
alias "k"="kubectl"
alias "kgp"="kubectl get pods"
alias "kpf"="kubectl port-forward"
alias "kl"="kubectl logs"

# Easy stop logictech process when mx devices stop working
alias "kill-logi"="ps -A | grep -i 'Logitech' | grep -v 'grep' | awk '{ print \$1 }' | sudo xargs kill -9"

function kill-process () {
    local PROCESS="${1}"
    if [[ -z "${PROCESS}" ]]; then
        echo "Usage: kill-process <process_name>"
        return 1
    fi
    ps -A | grep -i "${PROCESS}" | grep -v 'grep' | awk '{ print $1 }' | sudo xargs kill -9
}

# Docker
alias "dc"="docker-compose"
alias "rm-images"="docker images | awk 'NR!=1' | awk '{ print \$3 }' | xargs docker image rm"

function docker-compose-restart () {
    local WORKER="${1}"
    echo "Restarting worker ${WORKER}"
    docker-compose stop ${WORKER}
    docker-compose build ${WORKER}
    docker-compose up --no-start ${WORKER}
    docker-compose start ${WORKER}
}

# NVM
export NVM_DIR="${HOME}/.nvm"
function nvm-init () {
    export NVM_DIR="${HOME}/.nvm"
    # [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

    [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && \. "/opt/homebrew/opt/nvm/nvm.sh"
    [ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && \. "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"
    nvm current
}
